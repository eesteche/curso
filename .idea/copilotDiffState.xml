<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/org/example/service/ProductoServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/org/example/service/ProductoServiceTest.java" />
              <option name="originalContent" value="package org.example.service;&#10;&#10;import org.example.entity.Producto;&#10;import org.example.repository.ProductoRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class ProductoServiceTest {&#10;    @Mock&#10;    private ProductoRepository productoRepository;&#10;&#10;    @InjectMocks&#10;    private ProductoService productoService;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void testFindById_found() {&#10;        Producto producto = new Producto();&#10;        producto.setId(&quot;1&quot;);&#10;        when(productoRepository.findById(&quot;1&quot;)).thenReturn(Optional.of(producto));&#10;        Optional&lt;Producto&gt; result = productoService.findById(&quot;1&quot;);&#10;        assertTrue(result.isPresent());&#10;        assertEquals(&quot;1&quot;, result.get().getId());&#10;    }&#10;&#10;    @Test&#10;    void testFindById_notFound() {&#10;        when(productoRepository.findById(&quot;2&quot;)).thenReturn(Optional.empty());&#10;        Optional&lt;Producto&gt; result = productoService.findById(&quot;2&quot;);&#10;        assertFalse(result.isPresent());&#10;    }&#10;&#10;    @Test&#10;    void testSave() {&#10;        Producto producto = new Producto();&#10;        producto.setName(&quot;Test&quot;);&#10;        when(productoRepository.save(producto)).thenReturn(producto);&#10;        Producto result = productoService.save(producto);&#10;        assertEquals(&quot;Test&quot;, result.getName());&#10;    }&#10;&#10;    @Test&#10;    void testUpdate_found() {&#10;        Producto original = new Producto();&#10;        original.setId(&quot;1&quot;);&#10;        Producto updated = new Producto();&#10;        updated.setNombre(&quot;NuevoNombre&quot;);&#10;        updated.setPrecio(99.0);&#10;        updated.setDescripcion(&quot;NuevaDesc&quot;);&#10;        when(productoRepository.findById(&quot;1&quot;)).thenReturn(Optional.of(original));&#10;        when(productoRepository.save(any(Producto.class))).thenReturn(original);&#10;        Optional&lt;Producto&gt; result = productoService.update(&quot;1&quot;, updated);&#10;        assertTrue(result.isPresent());&#10;        assertEquals(&quot;NuevoNombre&quot;, result.get().getNombre());&#10;        assertEquals(99.0, result.get().getPrecio());&#10;        assertEquals(&quot;NuevaDesc&quot;, result.get().getDescripcion());&#10;    }&#10;&#10;    @Test&#10;    void testUpdate_notFound() {&#10;        Producto updated = new Producto();&#10;        when(productoRepository.findById(&quot;2&quot;)).thenReturn(Optional.empty());&#10;        Optional&lt;Producto&gt; result = productoService.update(&quot;2&quot;, updated);&#10;        assertFalse(result.isPresent());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteById_found() {&#10;        when(productoRepository.existsById(&quot;1&quot;)).thenReturn(true);&#10;        doNothing().when(productoRepository).deleteById(&quot;1&quot;);&#10;        boolean deleted = productoService.deleteById(&quot;1&quot;);&#10;        assertTrue(deleted);&#10;    }&#10;&#10;    @Test&#10;    void testDeleteById_notFound() {&#10;        when(productoRepository.existsById(&quot;2&quot;)).thenReturn(false);&#10;        boolean deleted = productoService.deleteById(&quot;2&quot;);&#10;        assertFalse(deleted);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.example.entity.Producto;&#10;import org.example.repository.ProductoRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class ProductoServiceTest {&#10;    @Mock&#10;    private ProductoRepository productoRepository;&#10;&#10;    @InjectMocks&#10;    private ProductoService productoService;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void testFindById_found() {&#10;        Producto producto = new Producto();&#10;        producto.setId(&quot;1&quot;);&#10;        when(productoRepository.findById(&quot;1&quot;)).thenReturn(Optional.of(producto));&#10;        Optional&lt;Producto&gt; result = productoService.findById(&quot;1&quot;);&#10;        assertTrue(result.isPresent());&#10;        assertEquals(&quot;1&quot;, result.get().getId());&#10;    }&#10;&#10;    @Test&#10;    void testFindById_notFound() {&#10;        when(productoRepository.findById(&quot;2&quot;)).thenReturn(Optional.empty());&#10;        Optional&lt;Producto&gt; result = productoService.findById(&quot;2&quot;);&#10;        assertFalse(result.isPresent());&#10;    }&#10;&#10;    @Test&#10;    void testSave() {&#10;        Producto producto = new Producto();&#10;        producto.setName(&quot;Test&quot;);&#10;        producto.setCode(123);&#10;        when(productoRepository.save(producto)).thenReturn(producto);&#10;        Producto result = productoService.save(producto);&#10;        assertEquals(&quot;Test&quot;, result.getName());&#10;        assertEquals(123, result.getCode());&#10;    }&#10;&#10;    @Test&#10;    void testUpdate_found() {&#10;        Producto original = new Producto();&#10;        original.setId(&quot;1&quot;);&#10;        Producto updated = new Producto();&#10;        updated.setName(&quot;NuevoNombre&quot;);&#10;        updated.setCode(99);&#10;        when(productoRepository.findById(&quot;1&quot;)).thenReturn(Optional.of(original));&#10;        when(productoRepository.save(any(Producto.class))).thenReturn(original);&#10;        Optional&lt;Producto&gt; result = productoService.update(&quot;1&quot;, updated);&#10;        assertTrue(result.isPresent());&#10;        assertEquals(&quot;NuevoNombre&quot;, result.get().getName());&#10;        assertEquals(99, result.get().getCode());&#10;    }&#10;&#10;    @Test&#10;    void testUpdate_notFound() {&#10;        Producto updated = new Producto();&#10;        when(productoRepository.findById(&quot;2&quot;)).thenReturn(Optional.empty());&#10;        Optional&lt;Producto&gt; result = productoService.update(&quot;2&quot;, updated);&#10;        assertFalse(result.isPresent());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteById_found() {&#10;        when(productoRepository.existsById(&quot;1&quot;)).thenReturn(true);&#10;        doNothing().when(productoRepository).deleteById(&quot;1&quot;);&#10;        boolean deleted = productoService.deleteById(&quot;1&quot;);&#10;        assertTrue(deleted);&#10;    }&#10;&#10;    @Test&#10;    void testDeleteById_notFound() {&#10;        when(productoRepository.existsById(&quot;2&quot;)).thenReturn(false);&#10;        boolean deleted = productoService.deleteById(&quot;2&quot;);&#10;        assertFalse(deleted);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>